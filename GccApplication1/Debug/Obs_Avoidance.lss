
Obs_Avoidance.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  000003b0  00000444  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800082  00800082  00000466  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000466  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000498  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cd2  00000000  00000000  00000594  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000079e  00000000  00000000  00001266  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000069b  00000000  00000000  00001a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  000020a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000515  00000000  00000000  00002240  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004bf  00000000  00000000  00002755  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00002c14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__vector_10>
  2c:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 eb       	ldi	r30, 0xB0	; 176
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e8       	ldi	r26, 0x82	; 130
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 38       	cpi	r26, 0x86	; 134
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <main>
  8a:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Peek_A_Boo>:
	DataDir_MrLCDCrib=0xff;					// Put crib to display output
}

void Peek_A_Boo()
{
	MrLCDsControl|=1<<LightSwitch;			// Switch on the light 
  92:	82 b3       	in	r24, 0x12	; 18
  94:	80 62       	ori	r24, 0x20	; 32
  96:	82 bb       	out	0x12, r24	; 18
	
	asm volatile("nop");					//wait for some time 
  98:	00 00       	nop
	asm volatile("nop");
  9a:	00 00       	nop
	
	MrLCDsControl&=~(1<<LightSwitch);			// Switch off the light
  9c:	82 b3       	in	r24, 0x12	; 18
  9e:	8f 7d       	andi	r24, 0xDF	; 223
  a0:	82 bb       	out	0x12, r24	; 18
  a2:	08 95       	ret

000000a4 <Check_If_Mr_LCD_Is_Busy>:

}

void Check_If_Mr_LCD_Is_Busy()
{
	DataDir_MrLCDCrib=0x00;					//Crib will take the input from the user
  a4:	1a ba       	out	0x1a, r1	; 26
	
	
	MrLCDsControl|=1<<ReadWrite;			// Switch on the read mode
  a6:	82 b3       	in	r24, 0x12	; 18
  a8:	80 61       	ori	r24, 0x10	; 16
  aa:	82 bb       	out	0x12, r24	; 18
	MrLCDsControl&=~(1<<BipolarMood);			//activate the command mode
  ac:	82 b3       	in	r24, 0x12	; 18
  ae:	87 7f       	andi	r24, 0xF7	; 247
  b0:	82 bb       	out	0x12, r24	; 18
	
	while (MrLCDsCrib>=0x80)
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <Check_If_Mr_LCD_Is_Busy+0x14>
	{
		Peek_A_Boo();
  b4:	0e 94 49 00 	call	0x92	; 0x92 <Peek_A_Boo>
	
	
	MrLCDsControl|=1<<ReadWrite;			// Switch on the read mode
	MrLCDsControl&=~(1<<BipolarMood);			//activate the command mode
	
	while (MrLCDsCrib>=0x80)
  b8:	df 99       	sbic	0x1b, 7	; 27
  ba:	fc cf       	rjmp	.-8      	; 0xb4 <Check_If_Mr_LCD_Is_Busy+0x10>
	{
		Peek_A_Boo();
	}
	
	DataDir_MrLCDCrib=0xff;					// Put crib to display output
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	8a bb       	out	0x1a, r24	; 26
  c0:	08 95       	ret

000000c2 <Send_A_Command>:
	MrLCDsControl&=~(1<<LightSwitch);			// Switch off the light
}


void Send_A_Command(unsigned char command)
{
  c2:	cf 93       	push	r28
  c4:	c8 2f       	mov	r28, r24
	
	Check_If_Mr_LCD_Is_Busy();
  c6:	0e 94 52 00 	call	0xa4	; 0xa4 <Check_If_Mr_LCD_Is_Busy>
	
	MrLCDsCrib=command;						// Load the crib with the 8 bit command
  ca:	cb bb       	out	0x1b, r28	; 27
	
	MrLCDsControl&=~(1<<ReadWrite);			// Set the LCD to write mode
  cc:	82 b3       	in	r24, 0x12	; 18
  ce:	8f 7e       	andi	r24, 0xEF	; 239
  d0:	82 bb       	out	0x12, r24	; 18
	MrLCDsControl&=~(1<<BipolarMood);			// Set it to the command mode	
  d2:	82 b3       	in	r24, 0x12	; 18
  d4:	87 7f       	andi	r24, 0xF7	; 247
  d6:	82 bb       	out	0x12, r24	; 18
	Peek_A_Boo();
  d8:	0e 94 49 00 	call	0x92	; 0x92 <Peek_A_Boo>
	MrLCDsCrib=0;							//Erase the crib after use
  dc:	1b ba       	out	0x1b, r1	; 27
}
  de:	cf 91       	pop	r28
  e0:	08 95       	ret

000000e2 <Initialise>:



void Initialise(void)
{
DataDir_MrLCDsControl|=1<<LightSwitch|1<<ReadWrite|1<<BipolarMood;	//these information will go towards the LCD
  e2:	81 b3       	in	r24, 0x11	; 17
  e4:	88 63       	ori	r24, 0x38	; 56
  e6:	81 bb       	out	0x11, r24	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e8:	8f e5       	ldi	r24, 0x5F	; 95
  ea:	9a ee       	ldi	r25, 0xEA	; 234
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <Initialise+0xa>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <Initialise+0x10>
  f2:	00 00       	nop

_delay_ms(15);								// Wait for the LCD to start

Send_A_Command(0x01);	// to clear the screen
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	0e 94 61 00 	call	0xc2	; 0xc2 <Send_A_Command>
  fa:	8f e3       	ldi	r24, 0x3F	; 63
  fc:	9f e1       	ldi	r25, 0x1F	; 31
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <Initialise+0x1c>
 102:	00 c0       	rjmp	.+0      	; 0x104 <Initialise+0x22>
 104:	00 00       	nop
_delay_ms(2);
Send_A_Command(0x38);	// TO tell LCD about 8 data lines
 106:	88 e3       	ldi	r24, 0x38	; 56
 108:	0e 94 61 00 	call	0xc2	; 0xc2 <Send_A_Command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10c:	87 ec       	ldi	r24, 0xC7	; 199
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <Initialise+0x2e>
 114:	00 c0       	rjmp	.+0      	; 0x116 <Initialise+0x34>
 116:	00 00       	nop
_delay_us(50);
Send_A_Command(0b00001110);	//Some cursor command
 118:	8e e0       	ldi	r24, 0x0E	; 14
 11a:	0e 94 61 00 	call	0xc2	; 0xc2 <Send_A_Command>
 11e:	87 ec       	ldi	r24, 0xC7	; 199
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <Initialise+0x40>
 126:	00 c0       	rjmp	.+0      	; 0x128 <Initialise+0x46>
 128:	00 00       	nop
 12a:	08 95       	ret

0000012c <Send_A_Character>:
	MrLCDsControl&=~(1<<BipolarMood);			// Set it to the command mode	
	Peek_A_Boo();
	MrLCDsCrib=0;							//Erase the crib after use
}
void Send_A_Character(unsigned char character)
{
 12c:	cf 93       	push	r28
 12e:	c8 2f       	mov	r28, r24
	Check_If_Mr_LCD_Is_Busy();
 130:	0e 94 52 00 	call	0xa4	; 0xa4 <Check_If_Mr_LCD_Is_Busy>
	
	MrLCDsCrib=character;					// load the 8 bit characters on the data line
 134:	cb bb       	out	0x1b, r28	; 27
	
	MrLCDsControl&=~(1<<ReadWrite);			// Set to the write mode
 136:	82 b3       	in	r24, 0x12	; 18
 138:	8f 7e       	andi	r24, 0xEF	; 239
 13a:	82 bb       	out	0x12, r24	; 18
	MrLCDsControl|=1<<BipolarMood;			// Set it to the character mode	
 13c:	82 b3       	in	r24, 0x12	; 18
 13e:	88 60       	ori	r24, 0x08	; 8
 140:	82 bb       	out	0x12, r24	; 18
	
	Peek_A_Boo();
 142:	0e 94 49 00 	call	0x92	; 0x92 <Peek_A_Boo>
	MrLCDsCrib=0;							// Erase the crib after use
 146:	1b ba       	out	0x1b, r1	; 27
	
	
}
 148:	cf 91       	pop	r28
 14a:	08 95       	ret

0000014c <Send_A_String>:

void Send_A_String(char *stringOfChar)
{
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	ec 01       	movw	r28, r24
	while(*stringOfChar>0)
 152:	03 c0       	rjmp	.+6      	; 0x15a <Send_A_String+0xe>
	{
		Send_A_Character(*stringOfChar++);
 154:	21 96       	adiw	r28, 0x01	; 1
 156:	0e 94 96 00 	call	0x12c	; 0x12c <Send_A_Character>
	
}

void Send_A_String(char *stringOfChar)
{
	while(*stringOfChar>0)
 15a:	88 81       	ld	r24, Y
 15c:	81 11       	cpse	r24, r1
 15e:	fa cf       	rjmp	.-12     	; 0x154 <Send_A_String+0x8>
	{
		Send_A_Character(*stringOfChar++);
	}
}
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	08 95       	ret

00000166 <GoToMrLCDLocation>:


void GoToMrLCDLocation(uint8_t x, uint8_t y)
{
	Send_A_Command(0x80+ firstColumnPositionForMrLCD[y-1] + (x-1));
 166:	e6 2f       	mov	r30, r22
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	e1 5a       	subi	r30, 0xA1	; 161
 16c:	ff 4f       	sbci	r31, 0xFF	; 255
 16e:	90 81       	ld	r25, Z
 170:	89 0f       	add	r24, r25
 172:	81 58       	subi	r24, 0x81	; 129
 174:	0e 94 61 00 	call	0xc2	; 0xc2 <Send_A_Command>
 178:	08 95       	ret

0000017a <__vector_1>:
	}
}


ISR(INT0_vect)
{
 17a:	1f 92       	push	r1
 17c:	0f 92       	push	r0
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	0f 92       	push	r0
 182:	11 24       	eor	r1, r1
 184:	8f 93       	push	r24
 186:	9f 93       	push	r25
	if(i == 0)
 188:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__data_end>
 18c:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <__data_end+0x1>
 190:	89 2b       	or	r24, r25
 192:	51 f4       	brne	.+20     	; 0x1a8 <__vector_1+0x2e>
	{
		SetBit(TCCR1B,CS10);
 194:	8e b5       	in	r24, 0x2e	; 46
 196:	81 60       	ori	r24, 0x01	; 1
 198:	8e bd       	out	0x2e, r24	; 46
		i = 1;
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__data_end+0x1>
 1a2:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__data_end>
 1a6:	0d c0       	rjmp	.+26     	; 0x1c2 <__vector_1+0x48>
	}
	else
	{
		TCCR1B = 0;
 1a8:	1e bc       	out	0x2e, r1	; 46
		pulse = TCNT1;
 1aa:	8c b5       	in	r24, 0x2c	; 44
 1ac:	9d b5       	in	r25, 0x2d	; 45
 1ae:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <pulse+0x1>
 1b2:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <pulse>
		TCNT1 = 0;
 1b6:	1d bc       	out	0x2d, r1	; 45
 1b8:	1c bc       	out	0x2c, r1	; 44
		i = 0;
 1ba:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__data_end+0x1>
 1be:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__data_end>
	}
}
 1c2:	9f 91       	pop	r25
 1c4:	8f 91       	pop	r24
 1c6:	0f 90       	pop	r0
 1c8:	0f be       	out	0x3f, r0	; 63
 1ca:	0f 90       	pop	r0
 1cc:	1f 90       	pop	r1
 1ce:	18 95       	reti

000001d0 <MoveForward>:

void MoveForward (void)
{
	PORTC = 0x01;
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	85 bb       	out	0x15, r24	; 21
 1d4:	08 95       	ret

000001d6 <MoveStop>:
}
void MoveStop(void)
{
	PORTC = 0X00;
 1d6:	15 ba       	out	0x15, r1	; 21
 1d8:	08 95       	ret

000001da <RotateLeft>:
}
void RotateLeft(void)
{
	PORTC =0b00001001;
 1da:	89 e0       	ldi	r24, 0x09	; 9
 1dc:	85 bb       	out	0x15, r24	; 21
 1de:	08 95       	ret

000001e0 <main>:

static volatile int pulse = 0;
static volatile int i = 0;

int main(void)
{
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	cd b7       	in	r28, 0x3d	; 61
 1e6:	de b7       	in	r29, 0x3e	; 62
 1e8:	60 97       	sbiw	r28, 0x10	; 16
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	f8 94       	cli
 1ee:	de bf       	out	0x3e, r29	; 62
 1f0:	0f be       	out	0x3f, r0	; 63
 1f2:	cd bf       	out	0x3d, r28	; 61
	MCUCSR|= (1<<JTD);
 1f4:	84 b7       	in	r24, 0x34	; 52
 1f6:	80 68       	ori	r24, 0x80	; 128
 1f8:	84 bf       	out	0x34, r24	; 52
	MCUCSR|= (1<<JTD);
 1fa:	84 b7       	in	r24, 0x34	; 52
 1fc:	80 68       	ori	r24, 0x80	; 128
 1fe:	84 bf       	out	0x34, r24	; 52
	
	DDRC = 0XFF;
 200:	8f ef       	ldi	r24, 0xFF	; 255
 202:	84 bb       	out	0x14, r24	; 20

	int16_t count_a = 0;
	char show_a[16];
	Initialise();
 204:	0e 94 71 00 	call	0xe2	; 0xe2 <Initialise>
	DDRD = 0b11111011;
 208:	8b ef       	ldi	r24, 0xFB	; 251
 20a:	81 bb       	out	0x11, r24	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 20c:	2f ef       	ldi	r18, 0xFF	; 255
 20e:	80 e7       	ldi	r24, 0x70	; 112
 210:	92 e0       	ldi	r25, 0x02	; 2
 212:	21 50       	subi	r18, 0x01	; 1
 214:	80 40       	sbci	r24, 0x00	; 0
 216:	90 40       	sbci	r25, 0x00	; 0
 218:	e1 f7       	brne	.-8      	; 0x212 <main+0x32>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <main+0x3c>
 21c:	00 00       	nop
	_delay_ms(50);

	Initialise();
 21e:	0e 94 71 00 	call	0xe2	; 0xe2 <Initialise>

	SetBit(GICR,INT0);
 222:	8b b7       	in	r24, 0x3b	; 59
 224:	80 64       	ori	r24, 0x40	; 64
 226:	8b bf       	out	0x3b, r24	; 59
SetBit(MCUCR,ISC00);
 228:	85 b7       	in	r24, 0x35	; 53
 22a:	81 60       	ori	r24, 0x01	; 1
 22c:	85 bf       	out	0x35, r24	; 53

	sei();
 22e:	78 94       	sei
	
	while(1)
	{
		
		SetBit(PORTD,PIND0);
 230:	82 b3       	in	r24, 0x12	; 18
 232:	81 60       	ori	r24, 0x01	; 1
 234:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 236:	20 e5       	ldi	r18, 0x50	; 80
 238:	2a 95       	dec	r18
 23a:	f1 f7       	brne	.-4      	; 0x238 <main+0x58>
		_delay_us(15);

		ClearBit(PORTD,PIND0);
 23c:	82 b3       	in	r24, 0x12	; 18
 23e:	8e 7f       	andi	r24, 0xFE	; 254
 240:	82 bb       	out	0x12, r24	; 18
		count_a = pulse/58;
 242:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <pulse>
 246:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <pulse+0x1>
 24a:	6a e3       	ldi	r22, 0x3A	; 58
 24c:	70 e0       	ldi	r23, 0x00	; 0
 24e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <__divmodhi4>
 252:	e6 2e       	mov	r14, r22
 254:	f7 2e       	mov	r15, r23
 256:	06 2f       	mov	r16, r22
 258:	17 2f       	mov	r17, r23

		Send_A_String("Distance Sensor");
 25a:	82 e6       	ldi	r24, 0x62	; 98
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	0e 94 a6 00 	call	0x14c	; 0x14c <Send_A_String>
		GoToMrLCDLocation(1,2);
 262:	62 e0       	ldi	r22, 0x02	; 2
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	0e 94 b3 00 	call	0x166	; 0x166 <GoToMrLCDLocation>
		Send_A_String("Distance=");
 26a:	82 e7       	ldi	r24, 0x72	; 114
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	0e 94 a6 00 	call	0x14c	; 0x14c <Send_A_String>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 272:	4a e0       	ldi	r20, 0x0A	; 10
 274:	be 01       	movw	r22, r28
 276:	6f 5f       	subi	r22, 0xFF	; 255
 278:	7f 4f       	sbci	r23, 0xFF	; 255
 27a:	8e 2d       	mov	r24, r14
 27c:	9f 2d       	mov	r25, r15
 27e:	0e 94 a1 01 	call	0x342	; 0x342 <__itoa_ncheck>
		itoa(count_a,show_a,10);
		Send_A_String(show_a);
 282:	ce 01       	movw	r24, r28
 284:	01 96       	adiw	r24, 0x01	; 1
 286:	0e 94 a6 00 	call	0x14c	; 0x14c <Send_A_String>
		Send_A_String(" ");
 28a:	8c e7       	ldi	r24, 0x7C	; 124
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	0e 94 a6 00 	call	0x14c	; 0x14c <Send_A_String>
		GoToMrLCDLocation(13,2);
 292:	62 e0       	ldi	r22, 0x02	; 2
 294:	8d e0       	ldi	r24, 0x0D	; 13
 296:	0e 94 b3 00 	call	0x166	; 0x166 <GoToMrLCDLocation>
		Send_A_String("cm");
 29a:	8e e7       	ldi	r24, 0x7E	; 126
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	0e 94 a6 00 	call	0x14c	; 0x14c <Send_A_String>
		GoToMrLCDLocation(1,1);
 2a2:	61 e0       	ldi	r22, 0x01	; 1
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	0e 94 b3 00 	call	0x166	; 0x166 <GoToMrLCDLocation>
		
		
		MoveForward();
 2aa:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <MoveForward>
		if(count_a<=10)
 2ae:	0b 30       	cpi	r16, 0x0B	; 11
 2b0:	11 05       	cpc	r17, r1
 2b2:	0c f0       	brlt	.+2      	; 0x2b6 <main+0xd6>
 2b4:	bd cf       	rjmp	.-134    	; 0x230 <main+0x50>
		{
			MoveStop();
 2b6:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <MoveStop>
			do
			{
				RotateLeft();
 2ba:	0e 94 ed 00 	call	0x1da	; 0x1da <RotateLeft>
			} while (count_a<=30);
 2be:	0f 31       	cpi	r16, 0x1F	; 31
 2c0:	11 05       	cpc	r17, r1
 2c2:	dc f3       	brlt	.-10     	; 0x2ba <main+0xda>
			MoveForward();
 2c4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <MoveForward>
 2c8:	b3 cf       	rjmp	.-154    	; 0x230 <main+0x50>

000002ca <__vector_11>:
 2ca:	1f 92       	push	r1
 2cc:	0f 92       	push	r0
 2ce:	0f b6       	in	r0, 0x3f	; 63
 2d0:	0f 92       	push	r0
 2d2:	11 24       	eor	r1, r1
 2d4:	0f 90       	pop	r0
 2d6:	0f be       	out	0x3f, r0	; 63
 2d8:	0f 90       	pop	r0
 2da:	1f 90       	pop	r1
 2dc:	18 95       	reti

000002de <__vector_10>:
 2de:	1f 92       	push	r1
 2e0:	0f 92       	push	r0
 2e2:	0f b6       	in	r0, 0x3f	; 63
 2e4:	0f 92       	push	r0
 2e6:	11 24       	eor	r1, r1
 2e8:	0f 90       	pop	r0
 2ea:	0f be       	out	0x3f, r0	; 63
 2ec:	0f 90       	pop	r0
 2ee:	1f 90       	pop	r1
 2f0:	18 95       	reti

000002f2 <__divmodhi4>:
 2f2:	97 fb       	bst	r25, 7
 2f4:	07 2e       	mov	r0, r23
 2f6:	16 f4       	brtc	.+4      	; 0x2fc <__divmodhi4+0xa>
 2f8:	00 94       	com	r0
 2fa:	07 d0       	rcall	.+14     	; 0x30a <__divmodhi4_neg1>
 2fc:	77 fd       	sbrc	r23, 7
 2fe:	09 d0       	rcall	.+18     	; 0x312 <__divmodhi4_neg2>
 300:	0e 94 8d 01 	call	0x31a	; 0x31a <__udivmodhi4>
 304:	07 fc       	sbrc	r0, 7
 306:	05 d0       	rcall	.+10     	; 0x312 <__divmodhi4_neg2>
 308:	3e f4       	brtc	.+14     	; 0x318 <__divmodhi4_exit>

0000030a <__divmodhi4_neg1>:
 30a:	90 95       	com	r25
 30c:	81 95       	neg	r24
 30e:	9f 4f       	sbci	r25, 0xFF	; 255
 310:	08 95       	ret

00000312 <__divmodhi4_neg2>:
 312:	70 95       	com	r23
 314:	61 95       	neg	r22
 316:	7f 4f       	sbci	r23, 0xFF	; 255

00000318 <__divmodhi4_exit>:
 318:	08 95       	ret

0000031a <__udivmodhi4>:
 31a:	aa 1b       	sub	r26, r26
 31c:	bb 1b       	sub	r27, r27
 31e:	51 e1       	ldi	r21, 0x11	; 17
 320:	07 c0       	rjmp	.+14     	; 0x330 <__udivmodhi4_ep>

00000322 <__udivmodhi4_loop>:
 322:	aa 1f       	adc	r26, r26
 324:	bb 1f       	adc	r27, r27
 326:	a6 17       	cp	r26, r22
 328:	b7 07       	cpc	r27, r23
 32a:	10 f0       	brcs	.+4      	; 0x330 <__udivmodhi4_ep>
 32c:	a6 1b       	sub	r26, r22
 32e:	b7 0b       	sbc	r27, r23

00000330 <__udivmodhi4_ep>:
 330:	88 1f       	adc	r24, r24
 332:	99 1f       	adc	r25, r25
 334:	5a 95       	dec	r21
 336:	a9 f7       	brne	.-22     	; 0x322 <__udivmodhi4_loop>
 338:	80 95       	com	r24
 33a:	90 95       	com	r25
 33c:	bc 01       	movw	r22, r24
 33e:	cd 01       	movw	r24, r26
 340:	08 95       	ret

00000342 <__itoa_ncheck>:
 342:	bb 27       	eor	r27, r27
 344:	4a 30       	cpi	r20, 0x0A	; 10
 346:	31 f4       	brne	.+12     	; 0x354 <__itoa_ncheck+0x12>
 348:	99 23       	and	r25, r25
 34a:	22 f4       	brpl	.+8      	; 0x354 <__itoa_ncheck+0x12>
 34c:	bd e2       	ldi	r27, 0x2D	; 45
 34e:	90 95       	com	r25
 350:	81 95       	neg	r24
 352:	9f 4f       	sbci	r25, 0xFF	; 255
 354:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__utoa_common>

00000358 <__utoa_ncheck>:
 358:	bb 27       	eor	r27, r27

0000035a <__utoa_common>:
 35a:	fb 01       	movw	r30, r22
 35c:	55 27       	eor	r21, r21
 35e:	aa 27       	eor	r26, r26
 360:	88 0f       	add	r24, r24
 362:	99 1f       	adc	r25, r25
 364:	aa 1f       	adc	r26, r26
 366:	a4 17       	cp	r26, r20
 368:	10 f0       	brcs	.+4      	; 0x36e <__utoa_common+0x14>
 36a:	a4 1b       	sub	r26, r20
 36c:	83 95       	inc	r24
 36e:	50 51       	subi	r21, 0x10	; 16
 370:	b9 f7       	brne	.-18     	; 0x360 <__utoa_common+0x6>
 372:	a0 5d       	subi	r26, 0xD0	; 208
 374:	aa 33       	cpi	r26, 0x3A	; 58
 376:	08 f0       	brcs	.+2      	; 0x37a <__utoa_common+0x20>
 378:	a9 5d       	subi	r26, 0xD9	; 217
 37a:	a1 93       	st	Z+, r26
 37c:	00 97       	sbiw	r24, 0x00	; 0
 37e:	79 f7       	brne	.-34     	; 0x35e <__utoa_common+0x4>
 380:	b1 11       	cpse	r27, r1
 382:	b1 93       	st	Z+, r27
 384:	11 92       	st	Z+, r1
 386:	cb 01       	movw	r24, r22
 388:	0c 94 c6 01 	jmp	0x38c	; 0x38c <strrev>

0000038c <strrev>:
 38c:	dc 01       	movw	r26, r24
 38e:	fc 01       	movw	r30, r24
 390:	67 2f       	mov	r22, r23
 392:	71 91       	ld	r23, Z+
 394:	77 23       	and	r23, r23
 396:	e1 f7       	brne	.-8      	; 0x390 <strrev+0x4>
 398:	32 97       	sbiw	r30, 0x02	; 2
 39a:	04 c0       	rjmp	.+8      	; 0x3a4 <strrev+0x18>
 39c:	7c 91       	ld	r23, X
 39e:	6d 93       	st	X+, r22
 3a0:	70 83       	st	Z, r23
 3a2:	62 91       	ld	r22, -Z
 3a4:	ae 17       	cp	r26, r30
 3a6:	bf 07       	cpc	r27, r31
 3a8:	c8 f3       	brcs	.-14     	; 0x39c <strrev+0x10>
 3aa:	08 95       	ret

000003ac <_exit>:
 3ac:	f8 94       	cli

000003ae <__stop_program>:
 3ae:	ff cf       	rjmp	.-2      	; 0x3ae <__stop_program>
